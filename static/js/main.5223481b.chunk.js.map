{"version":3,"sources":["pages/home.tsx","pages/about.tsx","pages/posts.tsx","pages/404.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Home","props","className","posts","map","post","to","id","title","About","src","alt","Posts","history","useHistory","parseInt","useParams","useState","loaded","length","find","x","undefined","preComment","state","setState","onPostsLoaded","getPosts","then","catch","console","error","push","comments","commentsFromParent","postId","body","type","value","onChange","e","target","onClick","onAddComment","comment","NotFound","axios","get","data","App","setPosts","postComments","setPostComments","useEffect","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5223481b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { PostType } from '../App';\r\nimport 'flexboxgrid';\r\n\r\nconst Home = (props: { posts: PostType[] }) => { \r\n    return (\r\n        <section>\r\n            <div className=\"container\">\r\n                <div className=\"row center-xs\">\r\n                    <div className=\"col-xs-4\">\r\n                        {props.posts.map(post =>\r\n                            <Link to={\"./posts/\" + post.id} className=\"post-href\">\r\n                                <div key={post.id} className=\"post-card\">\r\n                                    <h3>{post.title}</h3>                                                               \r\n                                </div>\r\n                            </Link>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nconst About = () => {\r\n    return (\r\n        <section>\r\n            <div className=\"container\">\r\n            <div className=\"row center-xs\">\r\n                    <div className=\"col-xs-6\">\r\n                        <h3 className=\"about\">About</h3>\r\n                        <div className=\"about-wrapper\">\r\n                            <div className=\"about-image-wrapper\">\r\n                                <img src=\"https://picsum.photos/id/521/160/230\" \r\n                                    alt=\"\" \r\n                                    className=\"about-image\"\r\n                                />\r\n                            </div>\r\n                            <p className=\"about-text\">\r\n                                It is a long established \r\n                                fact that a reader will be \r\n                                distracted by the readable \r\n                                content of a page when looking \r\n                                at its layout. The point of using \r\n                                Lorem Ipsum is that it has a \r\n                                more-or-less normal distribution \r\n                                of letters, as opposed to using \r\n                                'Content here, content here', \r\n                                making it look like readable English. \r\n                                Many desktop publishing packages \r\n                                and web page editors now use Lorem \r\n                                Ipsum as their default model text, \r\n                                and a search for 'lorem ipsum' \r\n                                will uncover many web sites still \r\n                                in their infancy, \r\n                                fact that a reader will be \r\n                                distracted by the readable \r\n                                content of a page when looking \r\n                                at its layout.\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default About;","import React, { useState } from 'react';\r\nimport { useParams, useHistory, Link } from \"react-router-dom\";\r\nimport { PostType, getPosts, PostComment } from '../App'\r\nimport '../App.css';\r\n\r\ninterface PostState {\r\n    post?: PostType;\r\n    loaded: boolean;\r\n    preComment: string;    \r\n}\r\n\r\nconst Posts = (props: {\r\n    posts: PostType[],\r\n    comments: PostComment[],\r\n    onAddComment: (postId: number, comment: string) => void,\r\n}) => {\r\n    const history = useHistory();\r\n    const id = parseInt(useParams<{ id: string }>().id);\r\n    \r\n    \r\n    const [state, setState] = useState<PostState>({\r\n        loaded: props.posts.length > 0,\r\n        post: props.posts.length > 0 ? props.posts.find(x => x.id === id) : undefined,\r\n        preComment: ''        \r\n    });\r\n\r\n    const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => setState({\r\n        ...state,\r\n        preComment: e.target.value\r\n    });\r\n\r\n    const onCommentSubmit = () => {\r\n        props.onAddComment(id, state.preComment);\r\n\r\n        setState({\r\n            ...state,\r\n            preComment: ''           \r\n        });\r\n    }\r\n\r\n    const onPostsLoaded = (posts: PostType[]) =>\r\n        setState({\r\n            ...state,\r\n            loaded: true,\r\n            post: posts.find(x => x.id === id)\r\n        });\r\n\r\n    const loadPosts = () => {\r\n        getPosts()\r\n            .then(onPostsLoaded)\r\n            .catch(console.error);\r\n    };\r\n\r\n    if (!state.loaded) {\r\n        loadPosts();\r\n    }    \r\n\r\n    if (state.loaded && !state.post) {\r\n        history.push('/404');\r\n        return (<></>);\r\n    }\r\n\r\n    let comments = ['Nice post!'];\r\n\r\n    const commentsFromParent = props.comments.find(x => x.postId === id)\r\n\r\n    if (commentsFromParent) {\r\n        comments = [...commentsFromParent.comments, ...comments]\r\n    }\r\n\r\n    return (\r\n        <section>\r\n            <div className=\"container\">\r\n                <div className=\"row center-xs\">\r\n                    {state.loaded\r\n                        ?\r\n                        <div className=\"col-xs-3\">\r\n                            <Link to=\"/\">Back</Link>\r\n                            <div className=\"post-card\">\r\n                                <h3>\r\n                                    {state.post!.title}\r\n                                </h3>\r\n                                <p className=\"post-card__content\">\r\n                                    {state.post!.body}\r\n                                </p>\r\n                            </div>\r\n\r\n                            <div className=\"add-comment-wrapper\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    value={state.preComment}\r\n                                    onChange={onInputChange}\r\n                                />\r\n                                <button onClick={onCommentSubmit}>\r\n                                    Add comment\r\n                                </button>\r\n                                {comments.map(comment =>\r\n                                    <p\r\n                                        key={comment}\r\n                                        className=\"post-comment\"\r\n                                    >{\"Anonymous: \" + comment}</p>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                        : <h2>Loading..</h2>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\nexport default Posts","import React from 'react';\r\n\r\nconst NotFound = () => {\r\n    return (\r\n        <section>\r\n            <div className=\"container\">\r\n                <div className=\"row center-xs\">\r\n                    <div className=\"col-xs-3\">\r\n                        <h3>Page Not Found 404</h3>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default NotFound;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Home from './pages/home'\nimport About from './pages/about'\nimport Posts from './pages/posts'\nimport NotFound from './pages/404'\nimport axios from 'axios';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link  \n} from \"react-router-dom\";\n\nexport type PostType = {\n  userId: string,\n  id: number,\n  title: string,\n  body: string,\n}\n\nexport type PostComment = {\n  postId: number;\n  comments: string[];\n};\n\nexport const getPosts = (): Promise<PostType[]> => {\n  return axios.get(\"https://jsonplaceholder.typicode.com/posts\").then(({ data }) => data)\n}\n\nconst App = () => {  \n\n  const [posts, setPosts] = useState<PostType[]>([])\n  const [postComments, setPostComments] = useState<PostComment[]>([])\n\n  useEffect(() => {\n    if (posts.length === 0) {\n      getPosts().then(setPosts)\n    }\n  }, [posts]);  \n\n  const onAddComment = (postId: number, comment: string) => {\n    const post = postComments.find(x => x.postId === postId)\n    \n    if (post) {\n      post.comments = [comment, ...post.comments]\n    } else {\n      setPostComments([\n        ...postComments,\n        {\n          postId: postId,\n          comments: [comment]\n        }\n      ])\n    }\n  };\n\n  return (\n    <><br />\n      <Router>\n        &nbsp; &nbsp; &nbsp; &nbsp;\n        <Link to=\"/\">Home</Link>\n        &nbsp; &nbsp; &nbsp;\n        <Link to=\"/about\">About</Link>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home posts={posts} />\n          </Route>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route path={\"/posts/:id\"}>\n            <Posts posts={posts} comments={postComments} onAddComment={onAddComment} />\n          </Route>\n          <Route path=\"/404\">\n            <NotFound />\n          </Route>\n        </Switch>\n      </Router></>\n  );\n}\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}